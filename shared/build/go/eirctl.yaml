contexts:
  go1x:
    container:
      name: public.ecr.aws/docker/library/golang:1.25-trixie
      enable_dind: true
      enable_mount: true
    envfile:
      exclude:
        - GO
        - CXX
        - CGO

  golint:
    container:
      name: docker.io/golangci/golangci-lint:v2.4.0-alpine
      enable_mount: true
    envfile:
      exclude:
        - GO
        - CXX
        - CGO
        - PATH
        - HOME

tasks:
  clean:
    command:
      - echo "running clean"
      - |
        rm -rf bin/*
        rm -rf dist/*
        rm -rf vendor/*
        rm -rf .coverage
  
  test_prereqs:
    context: go1x
    description: Installs coverage and junit tools
    command:
      - |
        mkdir -p .coverage .deps
        export GOPATH="${PWD}/.deps" GOBIN="${PWD}/.deps/bin"
        go install github.com/jstemmer/go-junit-report@v0.9.1
        go install github.com/axw/gocov/gocov@v1.0.0
        go install github.com/AlekSi/gocov-xml@v1.0.0
    allow_failure: true

  vuln:check:
    context: go1x
    description: |
      Runs a vulnerability scan against the code base
    command:
      - |
        unset GOTOOLCHAIN
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  test:
    context: go1x
    command:
      - |
        unset GOTOOLCHAIN
        mkdir -p .coverage .deps
        export GOPATH=$PWD/.deps GOBIN=$PWD/.deps/bin
        CGO_ENABLED=1 go test ./... -v -coverpkg=${ROOT_PKG_NAME:=github.com/Ensono}/... -race -mod=readonly -shuffle=on -buildvcs=false -coverprofile=.coverage/out -count=1 -run=$GO_TEST_RUN_ARGS | tee .coverage/test.out
        cat .coverage/test.out | .deps/bin/go-junit-report > .coverage/report-junit.xml
        .deps/bin/gocov convert .coverage/out | .deps/bin/gocov-xml > .coverage/report-cobertura.xml
    env:
      GOFLAGS: -buildvcs=false
    allow_failure: true

  show_coverage:
    command:
      - echo "Opening coverage html page"
      - go tool cover -html=.coverage/out

  golint:
    context: golint
    description: Runs the linter and go vet and other default static checks
    allow_failure: false
    command:
      - |
        golangci-lint run

pipelines:
  test:unit:
    - task: clean
    - task: test_prereqs
    - task: test
      depends_on:
        - clean
        - test_prereqs

  show:coverage:
    - pipeline: test:unit
    - task: show_coverage
      depends_on:
        - test:unit
  lints:
    - task: golint
    - task: vuln:check
