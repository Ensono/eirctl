# TF
contexts:
  eirctl:shared:infra:tf:
    container:
      name: docker.io/hashicorp/terraform:1.10.5
      entrypoint:
        - "/usr/bin/env"
      container_args:
        # adds your/CI SSH directory to allow for git module checkout
        - '-v $HOME/.ssh:/root/.ssh'
        # adds the default .aws directory for easier local management
        # when on remote hosts or in CI this will simply be ignored for a different
        # auth mechanism like IMDS or OIDC token
        # or direct AWS_ACCESS_KEY/AWS_SECRET_KEY/AWS_SESSION_TOKEN injection
        - '-v $HOME/.aws:/root/.aws'
        # User supplied directories
        - ${EIRCTL_CONTEXT_VOL_ARGS}
    envfile:
      exclude:
        - PATH
        - HOME

  eirctl:shared:infra:tf:docs:
    container:
      name: quay.io/terraform-docs/terraform-docs:0.19.0
      entrypoint:
        - "/usr/bin/env"
    envfile:
      exclude:
        - PATH
        - HOME

tasks:
  eirctl:tf:docs:generate:
    context: eirctl:shared:infra:tf:docs
    description: Generates Terraform Doc for a module in a given path under `$TF_DIR` variable
    command: terraform-docs --output-file ${OUTPUT_FILE} markdown ${TF_DIR}
    env:
      OUTPUT_FILE: README.md
    required:
      env:
        - TF_DIR

  eirctl:tf:lint:format:
    context: eirctl:shared:infra:tf
    description: |
      Perform Terraform Format Check

      If you want to run the correction locally upon a CI failure

      `taskctl run lint:terraform:format -- -recursive`
    command:
      - terraform fmt {{ if .ArgsList }}{{ .Args }} -check{{ end }} -diff -recursive ${TF_DIR}
    required:
      env:
        - TF_DIR

  eirctl:tf:lint:validate:
    context: eirctl:shared:infra:tf
    description: Perform Terraform Validation
    command:
      - terraform -chdir=${TF_DIR} init -backend=false
      - terraform -chdir=${TF_DIR} validate
    required:
      env:
        - TF_DIR

  eirctl:tf:test:unit:
    context: eirctl:shared:infra:tf
    description: Perform Terraform Unit Tests
    command:
      - terraform -chdir=${TF_DIR} test
    required:
      env:
        - TF_DIR

  eirctl:tf:init:
    context: eirctl:shared:infra:tf
    command:
      - terraform -chdir=${TF_DIR} init {{ if .ArgsList }}{{ .Args }}{{ end }}
    required:
      env:
        - TF_DIR

  eirctl:tf:plan:workspace:
    context: eirctl:shared:infra:tf
    description: |
      Generates a tfplan file. This assumes the use of workspace
      Expects a TF_DIR env variable.
      Optionally can append args to the using the stdin e.g. `-- --var-file=../vars.tfvars`
    command:
      - terraform -chdir=${TF_DIR} workspace select -or-create ${WORKSPACE}
      - terraform -chdir=${TF_DIR} plan -out tfplan {{ if .ArgsList }}{{ .Args }}{{ end }}
    required:
      env:
        - TF_DIR

  eirctl:tf:apply:workspace:
    context: eirctl:shared:infra:tf
    description: |
      Applies the generated tfplan file.
      Expects a TF_DIR env variable.
      Optionally can append args to the using the stdin `-- -arg1=val`
    command:
      - terraform -chdir=${TF_DIR} workspace select -or-create ${WORKSPACE}
      - terraform -chdir=${TF_DIR} apply tfplan {{ if .ArgsList }}{{ .Args }}{{ end }}
    required:
      env:
        - TF_DIR
