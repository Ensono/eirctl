# debug enabled by default. To temporary disable run with "--debug=false" flag
debug: true
# raw, prefixed, cockpit
output: prefixed
# show summary by default
summary: true

tasks:
  task1:
    # optional. "local" is context by default
    context: local
    description: "Optional description for task1"
    command:
      # ARGS is populated by arguments passed to task. eg. eirctl run task task1 -- arg1 arg2
      - echo ${ARGS}
      # .Args is populated by arguments passed to task. eg. eirctl run task task1 -- arg1 arg2
      - echo {{ .Args | default 'some value' }}
      # .ArgsList is populated by list of arguments passed to task. eg. eirctl run task task1 -- arg1 arg2
      - echo {{ index .ArgsList 0 }}
      - echo "My name is task1"
      - echo ${VAR_NAME_1} - ${VAR_NAME_2}
      - echo {{ .TaskName }}
      - pwd
    env:
      VAR_NAME: VAR_VALUE
    variations:
      - VAR_NAME_1: VARIATION_1
        VAR_NAME_2: VARIATION_1
      - VAR_NAME_1: VARIATION_2
        VAR_NAME_2: VARIATION_2
    dir: "{{ .Root }}/task/working/dir"
    timeout: 10s
    before: mkdir some-dir
    after: rm -rf some-dir
    exportAs: TASK1_STORED_OUTPUT
    condition: git diff --exit-code

  task2:
    context: docker-context-name
    command:
      - echo "Hello from container"
      - sleep {{ .sleep }}
    env:
      VAR_NAME: VAR_VALUE
    variables:
      sleep: 10

  task3:
    # local is default context
    context: docker-compose-context-name
    command:
      - echo "Hello from container created by docker-compose"
      - echo ${TASK1_STORED_OUTPUT}
    env:
      VAR_NAME: VAR_VALUE

  task4:
    context: kubectl
    command:
      - echo "I'm task4"
      - env
      - uname -a

  task-to-be-triggered-by-watcher:
    command:
      - echo ${EVENT_NAME} ${EVENT_PATH}

  task-with-variations:
    command:
      - GOOS=${GOOS} GOARCH=amd64 go build -o bin/binary_${GOOS} ./...
    variations:
      - GOOS: linux
      - GOOS: darwin
      - GOOS: windows

  test-watch-task:
    command:
      - echo TASK1 $EVENT_NAME $EVENT_PATH

  test-watch-task-2:
    command:
      - echo TASK1 $EVENT_NAME $EVENT_PATH

pipelines:
  pipeline1:
    - task: task1
      dir: /tmp
      condition: git diff --exit-code

    - name: some-stage-name
      task: task2
      depends_on: task1
      allow_failure: true

    - task: task3
      # task2 and task3 will run in parallel when task1 finished
      depends_on: task1
      variables:
        sleep: 30

    - task: task4
      depends_on: [task1, some-stage-name]
      env:
        # overrides task env
        VAR_NAME: VAR_VALUE

watchers:
  watcher1:
    watch: ["README.*", "pkg/**/*.go"]
    events: [create, write, remove, rename, chmod]
    task: task1

  test-watcher:
    events: ["write", "rename"]
    watch: ["docker-compose.yaml"]
    task: test-watch-task

  test-watcher-2:
    events: ["write", "rename", "create"]
    watch: ["*.yaml"]
    task: test-watch-task-2

  test-watcher-3:
    events: ["write", "rename", "create"]
    watch: ["*.md", "internal/**/*.go"]
    exclude: "LICENSE.md"
    task: test-watch-task-2

contexts:
  # will be created automatically if not set
  local:
    executable:
      bin: /bin/zsh
      args:
        - -c
    env:
      VAR_NAME: VAR_VALUE
    quote: "'"
    before: echo "SOME COMMAND TO RUN BEFORE EVERY TASK"
    after: echo "SOME COMMAND TO RUN WHEN TASK FINISHED SUCCESSFULLY"

  docker-context:
    executable:
      bin: /usr/local/bin/docker
      args:
        - run
        - --rm
        - alpine:latest
    env:
      DOCKER_HOST: "tcp://0.0.0.0:2375"
    before: echo "SOME COMMAND TO RUN BEFORE TASK"
    after: echo "SOME COMMAND TO RUN WHEN TASK FINISHED SUCCESSFULLY"

  docker-compose-context:
    dir: /app
    executable:
      bin: /usr/local/bin/docker-compose
      args:
        - run
        - --rm
        - api
    env:
      COMPOSE_FILE: /app/docker-compose-alternate.yaml
    # Executes once before first context usage
    up: docker-compose up -d --build --force-recreate api
    # Executes once when all tasks done
    down: docker-compose down api

  kubectl:
    executable:
      bin: /usr/local/bin/kubectl
      args:
        - exec
        - -n stage
        - pod-name
    env:
      KUBECONFIG: "$HOME/.kube/alternate-config"
