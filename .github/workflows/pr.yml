name: Lint and Test
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: write
  statuses: write
  checks: write
  pull-requests: write

jobs:
  set-version-tag:
    runs-on: ubuntu-24.04
    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.0
        with:
          versionSpec: '5.x'
      - name: Set SemVer Version
        uses: gittools/actions/gitversion/execute@v3.0
        id: gitversion
  # Runs in parallel
  lint:
    name: Lint
    runs-on: ubuntu-24.04
    env:
      DOCKER_HOST: unix:///var/run/docker.sock
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.x
      - name: Linters
        run: |
          go run -race cmd/main.go run lints -d

  test:
    name: Test
    runs-on: ubuntu-24.04
    needs:
      - set-version-tag
      - lint
    env:
      SEMVER: ${{ needs.set-version-tag.outputs.semVer }}
      DOCKER_HOST: unix:///var/run/docker.sock
    steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.24.x

    - name: Check out code into the Go module directory
      uses: actions/checkout@v4

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: check schema
      run: |
        CI=true go run cmd/main.go generate_own_schema

    - name: Test
      run: |
        go run cmd/main.go run pipeline test:unit

    - name: Publish Junit style Test Report
      uses: mikepenz/action-junit-report@v5
      if: always() # always run even if the previous step fails
      with:
        report_paths: '.coverage/report-junit.xml'
        commit: ${{ github.sha }}
        fail_on_failure: true
        check_name: Eirctl Unit Tests

    - name: Analyze with SonarCloud
      uses: SonarSource/sonarcloud-github-action@v3
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
      with:
        args:
          -Dsonar.projectVersion=${{ needs.set-version-tag.outputs.semVer }}
          -Dsonar.go.coverage.reportPaths=/github/workspace/.coverage/out
          -Dsonar.go.tests.reportPaths=/github/workspace/.coverage/report-junit.xml
