# yaml-language-server: $schema=schemas/schema_v1.json

debug: false
output: prefixed
# TODO: top level variables are not being munged int
# variables:
#   foo: 1

contexts:
  go1x:
    container:
      name: golang:1.24.1-bookworm
      enable_dind: true
    envfile:
      exclude:
        - GO
        - CXX
        - CGO

  golint:
    container:
      name: golangci/golangci-lint:v1.64.7-alpine
      # entrypoint:
      #   - /usr/bin/env
      # enable_dind: true
      enable_mount: true
    envfile:
      exclude:
        - GO
        - CXX
        - CGO
        - PATH
        - HOME

pipelines:
  prepare:
    - task: tidy
    - task: test
    - task: gofmt
    - task: golint
    - pipeline: lints

  lints:
    - task: golint
    # govet is run as part of golint
    # - task: govet
  
  test:unit:
    - task: clean
    - task: test_prereqs
    - task: test
      # env:
      #   DOCKER_HOST: unix:///var/run/docker.sock
      depends_on: 
        - clean
        - test_prereqs

  show:coverage:
    - pipeline: test:unit
    - task: show_coverage
      depends_on:
        - test:unit

  build:binary:
    - task: clean
    - task: build
      depends_on:
        - clean
      variables:
        RepoOwner: Ensono
        BinName: eirctl

tasks:
  clean: 
    command: 
      - echo "running clean"
      - | 
        rm -rf bin/*
        rm -rf dist/*
        rm -rf vendor/*
        rm -rf .coverage
  test_prereqs: 
    command: 
      - echo "running test pre-requisites"
      - |
        mkdir -p .coverage
        go install github.com/jstemmer/go-junit-report@v0.9.1 && \
        go install github.com/axw/gocov/gocov@v1.0.0 && \
        go install github.com/AlekSi/gocov-xml@v1.0.0
    allow_failure: true

  test:
    command:
      - |
        mkdir -p .coverage 
        export GOFLAGS=-buildvcs=false
        go test $(go list ./... | grep -v /local/) -v -race -mod=readonly -shuffle=on -coverprofile=.coverage/out -count=1 | tee .coverage/test.out
        cat .coverage/test.out | go-junit-report > .coverage/report-junit.xml
        gocov convert .coverage/out | gocov-xml > .coverage/report-cobertura.xml
    env:
      # TODO: bug when exclude is set up on the context it should allow task level overwrites
      GOFLAGS: -buildvcs=false
    allow_failure: true

  build:
    # context: go1x
    description: Builds the binary
    command:
      - |
        ldflags="-s -w -X \"github.com/{{.RepoOwner}}/{{.BinName}}/cmd/eirctl.Version={{.Version}}\" -X \"github.com/{{.RepoOwner}}/{{.BinName}}/cmd/eirctl.Revision={{.Revision}}\" -extldflags -static"
        GOOS=${GOOS} GOARCH=${GOARCH} CGO_ENABLED=0 go build -mod=readonly -buildvcs=false -ldflags="$ldflags" -o bin/{{.BinName}}-${GOOS}-${GOARCH}${BINARY_SUFFIX} cmd/main.go
    variations:
      - GOOS: windows
        GOARCH: amd64
        BINARY_SUFFIX: .exe
      - GOOS: windows
        GOARCH: "386"
        BINARY_SUFFIX: .exe
      - GOOS: windows
        GOARCH: arm64
        BINARY_SUFFIX: .exe
      - GOOS: darwin
        GOARCH: amd64
        BINARY_SUFFIX: ""
      - GOOS: darwin
        GOARCH: arm64
        BINARY_SUFFIX: ""
      - GOOS: linux
        GOARCH: arm64
        BINARY_SUFFIX: ""
      - GOOS: linux
        GOARCH: amd64
        BINARY_SUFFIX: ""
    reset_context: true
    variables:
      RepoOwner: Ensono
      BinName: eirctl

  golint:
   # in CI it is run 
    context: golint
    description: Runs the linter and go vet and other default static checks
    allow_failure: false
    command:
      - golangci-lint run

  goreleaser:
    command:
      - goreleaser --debug --rm-dist

  gofmt:
    context: go1x
    command:
      - go fmt ./...
      - gofmt -l **/*.go
      # - gofmt -l -cpuprofile .pprof  **/*.go

  schema_gen_deps:
    description: |
      Installing dependencies for the struct type generation 
    command:
      - pnpm install -g quicktype
  
  generate_own_schema:
    description: | 
      Generates the schema for a taskctl itself as well as generating types for a given CI implementation.
    command:
      - go run tools/schemagenerator/main.go
      - | 
        if [ ! -z "$(git status --porcelain --untracked-files=no)" ]; then 
          if [ ! -z ${CI+x} ] ; then
            echo "In CI with an unclean tree - exiting"
            echo "Info: make sure you have generatedschema and committed"
            exit 1
          fi
        fi
  
  generate_ci_structs_from_schema:
    description: |
      Type generation for target CI definitions used by the generate command
           CI Definitions will be used by generate-def command.

      ```
        config.GitHubCITarget: "https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/github-workflow.json",
        config.GitlabCITarget: "https://gitlab.com/gitlab-org/gitlab/-/raw/master/app/assets/javascripts/editor/schema/ci.json",
        // TODO: add more here - every time you add another implementation
      ```
    command:
      - mkdir -p ./internal/z_generated/github
      - quicktype --lang go --src-lang schema --src ./internal/z_generated/schema/sources/github.json -o internal/z_generated/github/schema.go --field-tags yaml \
        --just-types-and-package --omit-empty --package githubworkflow &2>1
      - go fmt ./internal/z_generated/github
      - mkdir -p ./internal/z_generated/gitlab
      - quicktype --lang go --src-lang schema --src ./internal/z_generated/schema/sources/gitlab.json -o internal/z_generated/gitlab/schema.go --field-tags yaml \
        --just-types-and-package --omit-empty --package gitlab &2>1
      - go fmt ./internal/z_generated/gitlab
      - quicktype --lang go --src-lang schema --src ./internal/schema/sources/bitbucket.json -o internal/schema/bitbucket.go --field-tags yaml --just-types-and-package --omit-empty --package schema
      - go fmt internal/schema/bitbucket.go
    # variations:
    #   # - CI_TARGET: github
    #   #   SCHEMA: ./internal/z_generated/schema/sources/github.json
    #   - CI_TARGET: gitlab
    #     SCHEMA: ./internal/z_generated/schema/sources/gitlab.json # https://gitlab.com/gitlab-org/gitlab/-/raw/master/app/assets/javascripts/editor/schema/ci.json

  show_coverage:
    command:
      - echo "Opening coverage html page"
      - go tool cover -html=.coverage/out

  show_docs:
    command:
      - go install golang.org/x/tools/cmd/godoc@latest
      - open http://localhost:6060/pkg/github.com/Ensono/taskctl/?m=all
      - godoc -notes "BUG|TODO" -play -http=:6060

  tidy:
    name: "tidy me up"
    command:
      - go mod tidy
